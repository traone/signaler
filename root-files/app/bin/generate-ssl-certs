#!/bin/bash

set -e

# Define these in Dockerfile or env:
#GENERATOR='self-signed'
#CA_FOLDER="$(pwd)/data/ca"
#CERT_FOLDER="$(pwd)/data/certs"

##
# Generates all necessary files for ssl certificate
# $1 - Domain name for certificate. For example: 'wordpress.dev'
# $2 - Certificate folder. Default: /data/certs/
# $3 - Root CA folder. Default: /data/ca/
##
function generate_ssl_files() {
  local domain=$1
  local folder=$2
  local ca_folder=$3
  
  cd $folder

  # Check if wildcard
  if [[ ${domain:0:2} == "*." ]]
  then
    wildcard=true
    # Remove wildcard part
    domain=${domain:2}
  else
    wildcard=false
  fi

  echo "Generating $folder/$domain.crt"

  # We want to create wildcard certificates which provide authority for both:
  # domain.dev
  # *.domain.dev
  # This combination is a bit tricky
  generate_ssl_config $domain $wildcard $domain.cnf $CA_FOLDER

  if [ ! -f "$domain.key" ] || [ ! -f "$domain.csr" ]
  then
    openssl req -new -sha256 -nodes -newkey rsa:2048 \
            -keyout $domain.key -out $domain.csr -config $domain.cnf
  fi

  if [ -f "$domain.csr" ] && [ ! -f "$domain.crt" ]
  then
    # openssl has some bugs causing it to crash on second certificate creation
    # This is just for local development so we don't need any of these fancier features
    cp /dev/null $CA_FOLDER/index.txt

    openssl ca -batch -out $domain.crt -config $domain.cnf -extensions v3_req -infiles $domain.csr
    # Add full chain to new cert
    cat $CA_FOLDER/ca.crt >> $domain.crt
  fi

}

##
# Generates openssl.cnf for domain request
# This is needed so that we can create wildcard certificates
# $1 - Domain name
# $2 - certificates path
# $3 - Root CA folder. Default: /data/ca/
##
function generate_ssl_config() {
local domain=$1
local wildcard=$2
local config_file_path=$3
local ca_folder=$4

# Remove contents of index.txt
#cp /dev/null /data/ca/index.txt

cat << EOF > $config_file_path
[ ca ]
default_ca = CA_default
prompt = no

[ CA_default ]
dir             = $ca_folder
certificate = \$dir/ca.crt
private_key = \$dir/ca.key

new_certs_dir = /tmp/
database  = \$dir/index.txt
serial    = \$dir/serial

default_md   = sha256
default_days = 365
policy = policy_anything

[ policy_anything ]
countryName   = optional
stateOrProvinceName = optional
localityName    = optional
organizationName  = optional
organizationalUnitName  = optional
commonName    = supplied
emailAddress    = optional

[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no

[req_distinguished_name]
O = Signaler Self-made Certificate
OU = Self-signed by onnimonni-signaler
CN = $domain

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = $domain
EOF

# Add wildcard too if it's specified
if $wildcard
then
  cat << EOF >> $config_file_path
DNS.2 = *.$domain
EOF
fi

}

# Read all domains from
while read line; do
  # Trim whitespace
  line=$(echo $line)
  if [[ "$line" =~ \#.* ]]
  then
    continue
  else
    domain=$line
  fi
  echo "Checking $domain"

  if [[ "$GENERATOR" == "self-signed" ]]
  then
    generate_ssl_files $domain $CERT_FOLDER $CA_FOLDER
  fi

done < $1
